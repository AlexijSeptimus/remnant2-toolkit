datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------------------------------------------
// NextAuth.js models
// ---------------------------------------------------------------------------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  displayName   String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Build         Build[]
  BuildVotes    BuildVoteCounts[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------------------------------------------------------------------------
// Other models
// ---------------------------------------------------------------------------------------------

enum ITEM_CATEGORY {
  helm
  torso
  legs
  gloves
  relic
  amulet
  weapon
  archtype
  concoction
  consumable
  mod
  mutator
  relicfragment
  ring
  skill
  trait
}

model Build {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
  createdBy     User              @relation(fields: [createdById], references: [id])
  createdById   String
  isPublic      Boolean           @default(true)
  name          String
  description   String?
  videoUrl      String?
  helm          String?
  torso         String?
  legs          String?
  gloves        String?
  relic         String?
  amulet        String?
  weapon        String?
  ring          String?
  archtype      String?
  skill         String?
  concoction    String?
  consumable    String?
  mod           String?
  mutator       String?
  relicfragment String?
  trait         String?
  BuildVotes    BuildVoteCounts[]

  @@index([createdById])
}

model BuildVoteCounts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([buildId])
  @@index([userId])
}
