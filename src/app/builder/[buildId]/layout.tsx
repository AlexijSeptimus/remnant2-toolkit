import { prisma } from '@/app/(lib)/db'
import BuildPage from './page'
import { Metadata, ResolvingMetadata } from 'next'
import { getServerSession } from '@/app/(lib)/auth'
import { Build } from '@prisma/client'
import PageHeader from '@/app/(components)/PageHeader'

async function getBuild(buildId: string) {
  if (!buildId) {
    console.error('No buildId provided!')
    return Response.json({ message: 'No buildId provided!' }, { status: 500 })
  }

  let build: Build | null = null
  try {
    build = await prisma.build.findUnique({
      where: {
        id: buildId,
      },
      include: {
        createdBy: true,
      },
    })
  } catch (error) {
    console.error('Error fetching build!', error)
    return Response.json({ message: 'Error fetching build!' }, { status: 500 })
  }

  if (!build) {
    console.error('Build not found!', build)
    return Response.json({ message: 'Build not found!' }, { status: 404 })
  }

  // Fetch the creator's name
  const creator = await prisma.user.findUnique({
    where: {
      id: build.createdById,
    },
  })

  // TODO Update to displayName
  const creatorName = creator?.name || ''

  const buildData = {
    ...build,
    createdByDisplayName: creatorName,
  }

  if (buildData.isPublic) {
    return Response.json(
      {
        message: 'Successfully fetched build!',
        build: buildData,
      },
      { status: 200 },
    )
  }

  const session = await getServerSession()
  if (!session || !session.user || buildData.createdById !== session.user.id) {
    console.error(
      'You must be logged in as the build creator to view a private build.',
    )
    return Response.json(
      {
        message:
          'You must be logged in as the build creator to view a private build.',
      },
      { status: 401 },
    )
  }

  return Response.json(
    {
      message: 'Successfully fetched build!',
      build: buildData,
    },
    { status: 200 },
  )
}

export async function generateMetadata(
  { params: { buildId } }: { params: { buildId: string } },
  parent: ResolvingMetadata,
): Promise<Metadata> {
  const buildData = await getBuild(buildId)
  const { build } = await buildData.json()

  if (!build.isPublic) {
    return {
      title: 'Private Build',
      description: 'This build is private.',
      openGraph: {
        title: 'Private Build',
        description: 'This build is private.',
        url: `https://remnant2builder.com/builder/${build.id}`,
        images: ['https://d2sqltdcj8czo5.cloudfront.net/og_image.png'],
      },
      twitter: {
        title: 'Private Build',
        description: 'This build is private.',
        images: ['https://d2sqltdcj8czo5.cloudfront.net/og_image.png'],
      },
    }
  }

  const previousOGImages = (await parent).openGraph?.images || []
  const previousTwitterImages = (await parent).twitter?.images || []
  const title = `${build.name} by ${build.createdByDisplayName}`
  const description =
    build.description ??
    'A build for Remnant 2, generated by remnant2toolkit.com'

  return {
    title,
    description,
    openGraph: {
      title,
      description: description,
      url: `https://remnant2builder.com/builder/${build.id}`,
      images: [
        'https://d2sqltdcj8czo5.cloudfront.net/build_preview_template.png',
        ...previousOGImages,
      ],
    },
    twitter: {
      title,
      description,
      images: [
        'https://d2sqltdcj8czo5.cloudfront.net/build_preview_template.png',
        ...previousTwitterImages,
      ],
    },
  }
}

export default async function Layout({
  params: { buildId },
}: {
  params: { buildId: string }
}) {
  const buildData = await getBuild(buildId)
  const { build: dbBuild } = await buildData.json()

  if (buildData.status !== 200) {
    throw new Error(`Build ${buildId} is not found. If you are sure the build exists, it may
    be marked private. You must be logged in as the build creator to view
    a private build.`)
  }

  return <BuildPage params={{ dbBuild }} />
}
